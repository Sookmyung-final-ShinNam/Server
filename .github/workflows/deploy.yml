on:
  pull_request:
    branches:
      - main
      - release  

  push:
    branches:
      - main
      - release  
      
jobs:
  build:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Create application.yml and decrypt keystore.p12
        run: |
          sed -i "s|\${DOMAIN}|${{ secrets.DOMAIN }}|g" ./src/main/resources/application.yml
          sed -i "s|\${REDIRECT_URL}|${{ secrets.REDIRECT_URL }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KEY_STORE}|${{ secrets.KEY_STORE }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KEY_STORE_TYPE}|${{ secrets.KEY_STORE_TYPE }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KEY_STORE_PASS}|${{ secrets.KEY_STORE_PASS }}|g" ./src/main/resources/application.yml
          sed -i "s|\${DB_USERNAME}|${{ secrets.DB_USERNAME }}|g" ./src/main/resources/application.yml
          sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" ./src/main/resources/application.yml
          sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" ./src/main/resources/application.yml
          
          sed -i "s|\${KAKAO_CLIENT_ID}|${{ secrets.KAKAO_CLIENT_ID }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KAKAO_CLIENT_SECRET}|${{ secrets.KAKAO_CLIENT_SECRET }}|g" ./src/main/resources/application.yml 
          
          sed -i "s|\${GPT_API_KEY}|${{ secrets.GPT_API_KEY }}|g" ./src/main/resources/application.yml
          sed -i "s|\${REPLICATE_API_KEY}|${{ secrets.REPLICATE_API_KEY }}|g" ./src/main/resources/application.yml

          sed -i "s|\${KAKAOPAY_CID}|${{ secrets.KAKAOPAY_CID }}|g" ./src/main/resources/application.yml
          sed -i "s|\${KAKAOPAY_PASS}|${{ secrets.KAKAOPAY_PASS }}|g" ./src/main/resources/application.yml

          sed -i "s|\${s3-bucket}|${{ secrets.s3Bucket }}|g" ./src/main/resources/application.yml
          sed -i "s|\${s3-accessKey}|${{ secrets.s3AccessKey }}|g" ./src/main/resources/application.yml
          sed -i "s|\${s3-secretKey}|${{ secrets.s3SecretKey }}|g" ./src/main/resources/application.yml
          
          echo "${{ secrets.KEY_STORE_BASE64 }}" | base64 --decode > ./src/main/resources/keystore.p12

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker 이미지 생성
        run: |
          docker build --platform linux/amd64 -t jiyoon0221/jangshinnam:latest .

      - name: Docker Hub에 푸시
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push jiyoon0221/jangshinnam:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'

    steps:
      - name: EC2 서버에 배포 (Docker Compose 사용)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GIT_NAME: ${{ secrets.GIT_NAME }}
        run: |
          echo "${EC2_KEY}" > ec2-key.pem
          chmod 600 ec2-key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts

          ssh -i ec2-key.pem -t ${EC2_USER}@${EC2_HOST} << EOF
            cd /home/${EC2_USER}/${GIT_NAME}

            git fetch origin
            if [ "\$GITHUB_REF" == "refs/heads/main" ]; then
              git checkout main
              git pull origin main
            elif [ "\$GITHUB_REF" == "refs/heads/release" ]; then
              git checkout release
              git pull origin release
            fi

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

            docker pull jiyoon0221/jangshinnam:latest
            docker rm -f jangshinnam || true
            docker-compose down
            docker-compose up -d --force-recreate
          EOF

          rm -f ec2-key.pem
